beecrowd | 2138
Most Frequent Digit
By Joao Marcos Salvanini Bellini de Moraes, IFSULDEMINAS BR Brazil

Timelimit: 1
In Nlogonia, several programmers participate in a cryptography competition named "Decrypt it!", in which the one who decrypt more messages wins.

In the middle of the competition, you notice that to continue and decrypt a message, you must solve the following challenge: find the most frequent digit of a number with up to 1001 digits.

Input
The input consists of several lines, containing an integer N (1 ≤ N ≤ 101000). Read input until EOF.

Output
Print the most frequent digit of the given number. If there's more than one, print the greatest one among them.

Input Sample	Output Sample
3981152060

1508442812980080428167730232746481

1

8



#include <stdio.h>
#include <string.h>

int main() {
    char str[1001];

    while (scanf("%s", str) != EOF) {
        int a[10] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        for (int i = 0; i < strlen(str); i++) {
            if (str[i] == '0')
                a[0]++;
            else if (str[i] == '1')
                a[1]++;
            else if (str[i] == '2')
                a[2]++;
            else if (str[i] == '3')
                a[3]++;
            else if (str[i] == '4')
                a[4]++;
            else if (str[i] == '5')
                a[5]++;
            else if (str[i] == '6')
                a[6]++;
            else if (str[i] == '7')
                a[7]++;
            else if (str[i] == '8')
                a[8]++;
            else if (str[i] == '9')
                a[9]++;
        }

        int large = a[0], index = 0;
        for (int i = 1; i < 10; i++) {
            if (a[i] >= large) {
                large = a[i];
                index = i;
            }
        }

        printf("%d\n", index);
    }

    return 0;
}
